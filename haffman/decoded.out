importData.Map(fromListWith,toList)importData.ByteString(intercalate)importData.Bifunctor(bimap)importSystem.Directory(doesFileExist)importData.ByteString.Char8(unpack,pack,head)importqualifiedData.ByteString.Char8asBSCimportqualifiedSystem.Directory.Internal.PreludeasPimportData.List(sortBy,find,isPrefixOf)importqualifiedData.List.Split(wordsBy)frequency::(Orda)=>[a]->[(a,Int)]frequencyxs=toList(fromListWith(+)[(x,1)|x<-xs])--Map:typeMapToCode=[(Char,String)]typeMapToChar=[(String,Char)]getByKey::(Eqa,Readb)=>a->[(a,b)]->MaybebgetByKeykeymapToChar=casefind(\x->fstx==key)mapToCharofNothing->NothingJustpair->Just(sndpair)expandMayBe::Reada=>Maybea->aexpandMayBe(Justa)=aexpandMayBeNothing=error"Sorry,can'tfindkey,somethinggoeswrong!!!"reversePair::[(Char,String)]->[(String,Char)]reversePair=map(\(a,b)->(b,a))--TreedataMyTreea=MyNodeCharInt|MyFilledNodeInt(MyTreea)(MyTreea)deriving(Eq,Ord,Show,Read)(+++)::MyTreea->MyTreea->MyTreeatree1@(MyFilledNodex1l1r1)+++tree2@(MyFilledNodex2l2r2)=MyFilledNode(x1+x2)tree1tree2tree1@(MyNodec1n1)+++tree2@(MyNodec2n2)=MyFilledNode(n1+n2)tree1tree2tree1@(MyFilledNoden1l1r1)+++tree2@(MyNodec2n2)=MyFilledNode(n1+n2)tree1tree2tree1@(MyNodec2n2)+++tree2@(MyFilledNoden1l1r1)=MyFilledNode(n1+n2)tree1tree2buildHaffmanTree::[MyTreea]->MyTreeabuildHaffmanTree(t:[])=tbuildHaffmanTree(a:b:cs)=buildHaffmanTree(sortBy(compare`P.on`getFrequencyOfNode)((a+++b):cs))getFrequencyOfNode::MyTreea->IntgetFrequencyOfNode(MyNodecn)=ngetFrequencyOfNode(MyFilledNodenleftNoderightNode)=nflattenThree::MyTreea->[(Char,String)]flattenThreea=flattenThreeHelpera""flattenThreeHelper::MyTreea->String->[(Char,String)]flattenThreeHelper(MyNodecn)path=[(c,path)]flattenThreeHelper(MyFilledNodenleftNoderightNode)path=flattenThreeHelperleftNode(path++"0")++flattenThreeHelperrightNode(path++"1")--EncodeandDecodeencodeArray::[Char]->[(Char,String)]->[String]encodeArrayinputTextcharToString=map(expandMayBe.(`getByKey`charToString))inputTextdecodeArray::[Char]->MapToChar->[Char]decodeArray[]_=[]decodeArrayarraytoChar=symbol:decodeArrayresttoCharwhere(symbol,rest)=decodeArrayhelperarraytoChardecodeArrayhelper::[Char]->MapToChar->(Char,[Char])decodeArrayhelper_[]=error"incorrect"decodeArrayhelperarray(a:cs)=ifisPrefixOf(fsta)arraythen(snda,droplarray)elsedecodeArrayhelperarraycswherel=length(fsta)--Read/WritewriteMapToCode::MapToCode->BSC.ByteStringwriteMapToCodetoChar=intercalate(pack"\n")(map(\(a,b)->pack([a]++""++b))toChar);writeMapToChar::MapToChar->BSC.ByteStringwriteMapToChartoChar=intercalate(pack"\n")(map(\(a,b)->pack(a++""++[b]))toChar);readFileToArray::BSC.ByteString->[(BSC.ByteString,BSC.ByteString)]readFileToArrayinputString=readFileToArrayHelper(BSC.wordsinputString)readFileToArrayHelper::[BSC.ByteString]->[(BSC.ByteString,BSC.ByteString)]readFileToArrayHelper[]=[]readFileToArrayHelper(a:b:cs)=(a,b):readFileToArrayHelpercsreadFileToArrayHelper[a]=error"Maybedeletespecialsymbolsfromsourcefile"parseToMapToCode::[(BSC.ByteString,BSC.ByteString)]->MapToCodeparseToMapToCode=map(Data.Bifunctor.bimapBSC.headBSC.unpack)parseToMapToChar::[(BSC.ByteString,BSC.ByteString)]->MapToCharparseToMapToChar=map(Data.Bifunctor.bimapBSC.unpackBSC.head)removeFromInputString::BSC.ByteString->BSC.ByteStringremoveFromInputStringline=BSC.pack(removePunc(BSC.unpackline))removePunc::[Char]->[Char]removePuncxs=[x|x<-xs,x`notElem`"\n"]--mainhaffman::IO()haffman=doputStr"Enterfilename:"fileName<-getLinefileExists<-doesFileExistfileNameiffileExiststhendoinputText<-BSC.readFilefileNameletfrequencyList=frequency(unpack(removeFromInputStringinputText))lettree=buildHaffmanTree(map(uncurryMyNode)frequencyList)letcharToString=flattenThreetreeletstringToChar=reversePaircharToStringletencodedText=encodeArray(unpack(removeFromInputStringinputText))charToStringletencodedTextToOutput=intercalate(pack"")(mappackencodedText);BSC.writeFile"toChar.out"(writeMapToCharstringToChar)BSC.writeFile"toCode.out"(writeMapToCodecharToString)BSC.writeFile"encoded.out"encodedTextToOutputreadedToCharString<-BSC.readFile"toChar.out"encodedByteString<-BSC.readFile"encoded.out"letreadedToChar=parseToMapToChar(readFileToArrayreadedToCharString)letdecodedText=decodeArray(unpackencodedByteString)readedToCharletdecodedTextToOutput=packdecodedTextBSC.writeFile"decoded.out"decodedTextToOutputP.putStrLn"Endofprogramm"elsedoP.putStrLn"Thefiledoesn'texist!"